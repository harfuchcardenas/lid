#!/usr/bin/perl

use strict;
use warnings;

# --- Configuration ---
my $input_file = "/etc/systemd/logind.conf"; # The target file to modify

# This is the "core string" that identifies the line we want to manage.
# For example, if you want to find lines related to HandleLidSwitch.
my $core_string_to_match_line = "HandleLidSwitch";

# This is the EXACT new line that will replace any line containing the
# $core_string_to_match_line. Ensure it ends with a newline character.
my $new_desired_line = "HandleLidSwitch=suspend";

# --- Processing ---

# Open the original file for reading
open (my $fh_input, '<', $input_file)
    or die "Could not open file '$input_file' for reading: $!";

# Create a temporary file to write changes
my $temp_file = "$input_file.temp";
open (my $fh_output, '>', $temp_file)
    or die "Could not open temporary file '$temp_file' for writing: $!";

# Read the file line by line
while (my $line = <$fh_input>) {
    # Check if the current line contains our core string.
    # The \Q and \E ensure that $core_string_to_match_line is treated as a literal string,
    # so special regex characters within it (if any) won't cause issues.
    if ($line =~ /\Q$core_string_to_match_line\E/) {
        # If the line contains the core string,
        # print our $new_desired_line to the output file.
        # We append a newline because print doesn't add it by default,
        # and we want each replacement to be on its own line.
        print $fh_output "$new_desired_line\n";
    } else {
        # If the line does NOT contain the core string,
        # print the original line as is to the output file.
        print $fh_output $line;
    }
}

# Close both files
close $fh_input;
close $fh_output;

# Rename the temporary file to the original name (overwriting the original)
rename $temp_file, $input_file
    or die "Could not rename '$temp_file' to '$input_file': $!";

print "The replacement has been successfully completed in '$input_file'.\n";
print "This script will restart the 'systemd-logind.service' using sudo.\n";
print "This might temporarily log you out or affect your graphical session.\n";
print "Do you wish to proceed? (y/n): ";

my $answer = <STDIN>;
chomp $answer; # Remove the newline character

if (lc $answer eq 'y') {
    print "Proceeding with 'sudo systemctl restart systemd-logind.service'...\n";
    # Execute the command
    system("sudo systemctl restart systemd-logind.service");

    # Check the exit status of the command
    if ($? == 0) {
        print "Command executed successfully.\n";
    } else {
        my $exit_status = $? >> 8; # Shift right by 8 bits to get the actual exit status
        print "Command failed with exit status: $exit_status\n";
        warn "Error: systemctl command failed.\n";
    }
} elsif (lc $answer eq 'n') {
    print "Operation cancelled by user.\n";
} else {
    print "Invalid input. Please enter 'y' or 'n'. Operation cancelled.\n";
}

exit;
# To make the changes take effect run sudo systemctl restart systemd-logind.service
