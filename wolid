#!/usr/bin/perl

use strict;
use warnings;

# --- Configuration ---
my $input_file = "/etc/systemd/logind.conf"; # The target file to modify

# The core string that identifies the line we want to manage.
# This part is used to find any line that *might* be a HandleLidSwitch setting.
my $core_setting_prefix = "HandleLidSwitch=";

# This is the EXACT desired value for the setting.
my $desired_value = "suspend";

# The complete line that will replace relevant lines.
my $new_desired_line = "$core_setting_prefix$desired_value";

# --- Processing ---

# Open the original file for reading
open (my $fh_input, '<', $input_file)
    or die "Could not open file '$input_file' for reading: $!";

# Create a temporary file to write changes
my $temp_file = "$input_file.temp";
open (my $fh_output, '>', $temp_file)
    or die "Could not open temporary file '$temp_file' for writing: $!";

# Read the file line by line
while (my $line = <$fh_input>) {
    # Remove any trailing newline character for consistent processing
    chomp $line;

    # Regex to find lines that start with optional whitespace, optional '#',
    # optional more whitespace, then our core setting prefix.
    # It captures whatever comes after the '='
    # The \Q and \E ensure literal matching of $core_setting_prefix.
    if ($line =~ /^\s*#?\s*\Q$core_setting_prefix\E(.+)$/) {
        my $current_value = $1; # Captured value after HandleLidSwitch=
        # Check if the current value is NOT the desired value.
        # We trim whitespace from the captured value before comparison.
        if (trim($current_value) ne $desired_value) {
            # If it's different, replace the line with our desired line.
            print $fh_output "$new_desired_line\n";
        } else {
            # If it's already "HandleLidSwitch=suspend", keep the original line as is.
            # (Ensures leading comments/whitespace are preserved if they existed on a matching line)
            $line = $core_setting_prefix;
            $line .= $current_value;
            print $fh_output "$line\n";
        }
    } else {
        # If the line does NOT contain our core setting prefix,
        # print the original line as is, followed by a single newline.
        print $fh_output "$line\n";
    }
}

# Close both files
close $fh_input;
close $fh_output;

# Rename the temporary file to the original name (overwriting the original)
# IMPORTANT: This step requires root privileges for /etc/systemd/logind.conf.
# Ensure you run the Perl script itself with 'sudo perl your_script_name.pl'
rename $temp_file, $input_file
    or die "Could not rename '$temp_file' to '$input_file': $!";

print "The replacement has been successfully completed in '$input_file'.\n";
print "This script will restart the 'systemd-logind.service' using sudo.\n";
print "This might temporarily log you out or affect your graphical session.\n";
print "Do you wish to proceed? (y/n): ";

my $answer = <STDIN>;
chomp $answer; # Remove the newline character

if (lc $answer eq 'y') {
    print "Proceeding with 'sudo systemctl restart systemd-logind.service'...\n";
    # Execute the command
    system("sudo systemctl restart systemd-logind.service");

    # Check the exit status of the command
    if ($? == 0) {
        print "Command executed successfully.\n";
    } else {
        my $exit_status = $? >> 8; # Shift right by 8 bits to get the actual exit status
        print "Command failed with exit status: $exit_status\n";
        warn "Error: systemctl command failed.\n";
    }
} elsif (lc $answer eq 'n') {
    print "Operation cancelled by user.\n";
} else {
    print "Invalid input. Please enter 'y' or 'n'. Operation cancelled.\n";
}

exit;

# --- Helper Function ---
# Function to trim leading/trailing whitespace from a string
sub trim {
    my $string = shift;
    $string =~ s/^\s+|\s+$//g;
    return $string;
}
